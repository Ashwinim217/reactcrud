{"version":3,"sources":["logo.svg","components/ContactForm.js","firebase.js","components/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","props","initialFieldValues","fullName","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","type","fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setCurrentId","setContactObjects","firebaseDb","child","on","snapshot","val","obj","push","err","console","log","set","Object","keys","map","key","onClick","id","window","confirm","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab915449.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react';\r\n\r\nconst ContactForm = (props) => {\r\n    const initialFieldValues = {\r\n        fullName: '',\r\n        mobile: '',\r\n        email: '',\r\n        address: ''\r\n    }\r\n\r\n    var [values, setValues] = useState(initialFieldValues)\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.currentId == '')\r\n            setValues({ ...initialFieldValues })\r\n        else\r\n            setValues({\r\n                ...props.contactObjects[props.currentId]\r\n            })\r\n    }, [props.currentId, props.contactObjects])\r\n\r\n    const handleInputChange = e => {\r\n        var { name, value } = e.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault()\r\n        props.addOrEdit(values);\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                        <i className=\"fas fa-user\"></i>\r\n                    </div>\r\n                </div>\r\n                <input className=\"form-control\" name=\"fullName\" placeholder=\"Full Name\"\r\n                    value={values.fullName}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"form-group input-group col-md-6\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                            <i className=\"fas fa-mobile-alt\"></i>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <input className=\"form-control\" name=\"mobile\" placeholder=\"Mobile\"\r\n                        value={values.mobile}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group input-group col-md-6\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <input className=\"form-control\" name=\"email\" placeholder=\"Email\"\r\n                        value={values.email}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n           \r\n               <input className=\"form-control\" name=\"address\" placeholder=\"Address\"\r\n                    value={values.address}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"submit\" value={props.currentId == \"\" ? \"Save\" : \"Update\"} className=\"btn btn-primary btn-block\" />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ContactForm;","import firebase from 'firebase/app';\r\n//import * as firebase from \"firebase\";\r\nimport \"firebase/database\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCA3Sg-63h_h9n8fhwmeWBJLb0OKIZMNog\",\r\n    authDomain: \"react-crud-c1418.firebaseapp.com\",\r\n    databaseURL: \"https://react-crud-c1418-default-rtdb.firebaseio.com\",\r\n    projectId: \"react-crud-c1418\",\r\n    storageBucket: \"react-crud-c1418.appspot.com\",\r\n    messagingSenderId: \"462715844015\",\r\n    appId: \"1:462715844015:web:2b332e068f82a114a9eb5a\"\r\n  };\r\n  // Initialize Firebase <script src=\"https://www.gstatic.com/firebasejs/8.3.1/firebase-app.js\"></script>\r\n\r\n  var fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\n  export default fireDb.database().ref();\r\n","import React, { useState, useEffect } from 'react';\r\nimport ContactForm from \"./ContactForm\";\r\nimport firebaseDb from \"../firebase\";\r\n\r\nconst Contacts = () => {\r\n\r\n\tvar [currentId, setCurrentId] = useState('');\r\n    var [contactObjects, setContactObjects] = useState({})\r\n\r\n    //Once components load complete\r\n    useEffect(() => {\r\n        firebaseDb.child('contacts').on('value', snapshot => {\r\n            if (snapshot.val() != null) {\r\n                setContactObjects({\r\n                    ...snapshot.val()\r\n                });\r\n            }\r\n        })\r\n    }, [])\r\n\r\n\r\n    const addOrEdit = (obj) => {\r\n        if (currentId == '')\r\n            firebaseDb.child('contacts').push(\r\n                obj,\r\n                err => {\r\n                    if (err)\r\n                        console.log(err)\r\n                    else\r\n                        setCurrentId('')\r\n                })\r\n        else\r\n            firebaseDb.child(`contacts/${currentId}`).set(\r\n                obj,\r\n                err => {\r\n                    if (err)\r\n                        console.log(err)\r\n                    else\r\n                        setCurrentId('')\r\n                })\r\n    }\r\n\r\n    const onDelete = id => {\r\n        if (window.confirm('Are you sure to delete this record?')) {\r\n            firebaseDb.child(`contacts/${id}`).remove(\r\n                err => {\r\n                    if (err)\r\n                        console.log(err)\r\n                    else\r\n                        setCurrentId('')\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n        <>\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4 text-center\">Contact Manager</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-5\">\r\n                    <ContactForm {...({ currentId, contactObjects, addOrEdit })} ></ContactForm>\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                    <table className=\"table table-borderless table-stripped\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Mobile</th>\r\n                                <th>Email</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                Object.keys(contactObjects).map((key) => (\r\n                                    <tr key={key}>\r\n                                        <td>{contactObjects[key].fullName}</td>\r\n                                        <td>{contactObjects[key].mobile}</td>\r\n                                        <td>{contactObjects[key].email}</td>\r\n                                        <td className=\"bg-light\">\r\n                                            <a className=\"btn text-primary\" onClick={() => { setCurrentId(key) }}>\r\n                                                <i className=\"fas fa-pencil-alt\"></i>\r\n                                            </a>\r\n                                            <a className=\"btn text-danger\" onClick={() => { onDelete(key) }}>\r\n                                                <i className=\"far fa-trash-alt\"></i>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Contacts;","import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from 'react';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 offset-md-2\">\n        <Contacts ></Contacts>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}